<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>虎牙、B站APP流量分析</title>
    <link href="/2024/03/07/%E8%99%8E%E7%89%99%E3%80%81B%E7%AB%99APP%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2024/03/07/%E8%99%8E%E7%89%99%E3%80%81B%E7%AB%99APP%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="虎牙直播"><a href="#虎牙直播" class="headerlink" title="虎牙直播"></a>虎牙直播</h2><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=Mzk5OWY0Y2Q1ZTU2Mjg3YzQ3MmFhOWRkNzQ4OGEyZGFfbjVKaUhtVkRPVWFnMWd4NUZUT09UWFM1QWZscnpIM0FfVG9rZW46VFpCWWJMVkpTb0FuZk54TzFPSWNsZ2x3bndlXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>对于直播来说，拉流采用的时http-flv。在建立连接过程中，建立TCP连接以及发送GET请求即可。可以从历史的GET请求携带的中获取直播源并进行请求。</p><h2 id="B站直播"><a href="#B站直播" class="headerlink" title="B站直播"></a>B站直播</h2><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=YWM5Yjc0YmNmZTNhNDEyYjdhOTAzYmUwMzk3MGY4MjJfc21oUFgxMms2UUJ3S09VYzdab1Y4TXRXYWU3WjdOcDhfVG9rZW46T1NxZGJ3RlJyb1pBWkJ4blBGNGNwdnZMbnlnXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>建立连接的过程中需要建立TCP连接后进行协商tls加密信息。</p><p>对于断开重连的场景，有两种方式：</p><p>session id会话复用：对于已经建立的SSL会话，使用session id为key（session id来自第一次请求的server hello中的session id字段），主密钥为value组成一对键值，保存在本地，服务器和客户端都保存一份。</p><p>当第二次握手时，客户端若想使用会话复用，则发起的client hello中session id会置上对应的值，服务器收到这个client hello，<strong>解析session id，查找本地是否有该session id</strong>，如果有，判断当前的加密套件和上个会话的加密套件是否一致，一致则允许使用会话复用，于是自己的server hello 中session id也置上和client hello中一样的值。</p><p>session ticket会话复用：客户端和服务器端建立了一次完整的握手过程后，服务器端将本次的会话数据进行加密，例如会话标识符、证书、密码套件和主密钥等，加密后生成一个ticket票据，并将票据通过NewSessionTicket子消息发送给客户端，由客户端来保存，下一次连接时客户端如果希望恢复上一次会话而不是重新进行握手，就<strong>将“票据”一起发送给服务器端</strong>，待服务器端解密校验无误后，进行一次简短的握手，恢复上一次会话。</p><p>这种方式适用于重连的服务器变化的情况。</p><h2 id="B站点播"><a href="#B站点播" class="headerlink" title="B站点播"></a>B站点播</h2><p>基于UDP的DTLS、QUIC协议占主要部分。</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=MjczZDdlY2Y5OWRlNmM1ZWQxM2M3MDljNzM0ZjJhNzZfdFhtazhBbDdtNDQxYjlOSnBtZ25EcTlKY1FSUlVCZzlfVG9rZW46VzZxSGJoTTVkb3E5dHR4YXNrcGNkU25vblZoXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><h2 id="推流"><a href="#推流" class="headerlink" title="推流"></a>推流</h2><p>对于推流，则以RTMP协议为主：</p><p>B站推流</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=ZWE2ZDAwZjYwZjdlZDk1M2M3ODMwYzgwMGQ0OGNiMGFfUFZWUzlaUmpCNjI0RzV5Y3FBMWVTdkx3STlEWkNPNW5fVG9rZW46WE1Qd2JuRW81bzVtRld4RUpnUWMzOTVmbmVkXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>虎牙推流</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=NzQ5YzVlY2YzOTczNDEzMzFhOWEwOWU2NGJlNjM5YTlfV2hDZ2Q0RmR1b1dxVDZqdTNkcVQwNkd6a3IzeThhdjlfVG9rZW46TnhCcGIyZU92b2JoQ3R4TWZWZ2NHTDU2bmJkXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><h3 id="RTMP的建联过程"><a href="#RTMP的建联过程" class="headerlink" title="RTMP的建联过程"></a>RTMP的建联过程</h3><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=NmFjYzc0ZWM0NDE3ODQyYmQ0ZDRkMzc4ZmIxY2E3NDRfanUxcXFSenp0SUdsaFkxZFFjUll2ZmpmemU1U3IzeDRfVG9rZW46Unp5bmJpMTRMbzVOVTR4UEg0NWM3c3dSbmxkXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>握手阶段</p><ul><li>客户端发送 C0+C1</li><li>服务端发送 S0+S1+S2</li><li>客户端发送 C2</li></ul><p>建立网络连接：服务端反馈确认窗口大小、带宽大小</p><ul><li>①、客户端发起连接请求</li><li>②、服务器设置客户端的应答窗口大小</li><li>③、服务器设置客户端的发送带宽大小</li><li>④、服务器设置客户端的接收块大小</li><li>⑤、服务器响应连接结果</li><li>⑥、客户端设置服务器的接收块大小</li></ul><p>建立网络流</p><ul><li>客户端发送命令消息中的“创建流” （createStream） 命令到服务器端。</li><li>服务器端接收到“创建流” 命令后， 发送命令消息中的“结果” (_result)， 通知客户端流的状态</li><li>客户端向服务器获取指定流的长度</li></ul><p>播放&#x2F;推流</p><ul><li>客户端发送命令消息中的“推流” （publish()） 命令到服务器。</li><li>服务器发送用户控制消息中的 “stream begin” ，告知客户端流 ID</li><li>服务器发送客户端要播放的音频和视频数据</li></ul><h2 id="HTTP-FLV"><a href="#HTTP-FLV" class="headerlink" title="HTTP-FLV"></a><strong>HTTP-FLV</strong></h2><p>HTTP-FLV 是将音视频数据以 FLV 文件格式进行封装，再将 FLV 格式数据封装在 HTTP 协议中进行传输的一种流媒体传输方式。</p><p>HTTP-FLV 被广泛采用的原因：</p><ol><li>HTTP 优点： a. 一些防火墙会墙掉 RTMP 或者其他的一些协议，但是防火墙对 HTTP 非常友好，不会墙掉 HTTP，因此基于 HTTP 传输的成功率更高。</li><li>FLV 优点： a. MP4、MKV 等封装格式将音视频数据和音视频元数据、索引、时间戳等分开存放，必须拿到完整的音视频文件才能播放，因为里面的单个音视频数据块不带有时间戳信息，播放器不能将这些没有时间戳信息的数据块连续起来，因此不能<strong>实时的解码</strong>播放。（当然 MP4 后来扩展了 FMP4 用于流媒体） b. FLV 格式的 FLV Tag Header 中携带时间戳，FLV 将每一帧音视频数据（Tag Body）封装成包含时间戳等音视频元数据（Tag Header）的数据包（Tag）。当播放器拿到 Tag 后，可根据时间戳等音视频元数据进行解码和播放。</li></ol><p>HTTP-FLV 的实现原理： HTTP-FLV 利用 HTTP&#x2F;1.1 分块传输机制发送 FLV 数据。虽然直播服务器无法知道直播流的长度，但是 HTTP&#x2F;1.1 分块传输机制可以不填写 <code>content-length</code> 字段而是携带 <code>Transfer-Encoding: chunked</code> 字段，这样客户端就会一直接受数据。</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=YWFiMmRjMGQ3M2M3NGU1MzdlNjhlZDEwNzBiNGI3YTRfQjg1eDBmUVdPZUhYOXY4NkJkZzJJVmo3ejk0RmVXc1dfVG9rZW46UWdoZGJoeVF4bzRSbEV4UlJEZ2NhWDk0bmNoXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>解析后的协议使用的依然是http-flv</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=MmMyMjRkYWQwNjYzZmNjMDQyYWUyODAwNDU5NGE3N2FfZnRQaHM1ZEg5NjZ1Q2JvdE9lanhIaTBnbFZrS0t3Q05fVG9rZW46Um55RmJLZ2J2b1dSOGp4UXRoN2NpY3BZblFlXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>可以通过设置SSLKEYLOGFILE的环境变量， 就能够获取到每次对话产生的log文件。利用每次对话中，存储下来的log来解密报文。</p><p>设置SSLKEYLOGFILE环境变量</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=ZjVjMGEzN2Q3ZDFmYzFjMDkxMWQzOTAwOGI4NjZmZmJfWE44S0ExVE9jbWExaVdBQjFVZXhDS1gzQkZ2WFJkaE1fVG9rZW46THd4VmJXY2Eyb3RBT2t4c3MxR2NKblBkbjJaXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>通过ssl.log中的client random(在TLS握手期间由客户端发送的随机非加密值)来标识会话，并从中获取对应的密钥。</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=MmE5MGNlNzA2ZDM1ODlhMWY1ZmIyYmEwODMzMGQzNmJfNnJkSTVxMFh2dTZwMjgxcDdqeTY1SWE2RExHcktRZVRfVG9rZW46UFZ3VmJ2RFdQbzBqS2F4dzJ4eGNFT05WbnBiXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>切换操作流程：</p><p>拉流端：http-flv</p><p>建立TCP连接；</p><p>建立TLS连接（对于B站APP）；</p><p>通过首次建立连接时收集到的session id或者是session ticket进行会话恢复。</p><p>发出HTTP-GET请求FLV视频数据；</p><p>通过历史信息获取直播源并生成URI请求。</p><p>推流端：RTMP</p><p>建立TCP连接；</p><p>RTMP握手；</p><p>建立网络连接：客户端与服务端交换确认窗口大小、带宽大小；</p><p>建立网络流；</p><p>设置SSLKEYLOGFILE环境变量</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=NjJmM2ZmNGQ1ZWE2YWEzYThhOTk0NzI2MTQyNjRkYjJfNVJWUXV1TG9jZ3g0dXU1b2hNMExBc2ZvTmtUWkNXaWVfVG9rZW46VUZheWJFbFE5b1Iyem54dzVZQmNEWWFMbmFnXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>在Wireshark中通过”编辑-&gt;首选项-&gt;Protocols-&gt;TLS“配置TLS协议中的(Pre)-Master-Secret log filename，将其配置成环境变量SSLKEYLOGFILE指向的log文件。</p><p><img src="https://d0xafjxiz1.feishu.cn/space/api/box/stream/download/asynccode/?code=N2YwZDBmNWI4MjdjZjI3MGI2YTEzOWQ3MWIwNTBjYjVfVWxkd2tlV1IyNG9xOHVDTzdUUzlFeFZ2OWV4Yzd4dFVfVG9rZW46Q2xJVmJkdlNsb2tmVUl4MUw3dGNFdmhkbjhkXzE3MDk4MDQ3NzE6MTcwOTgwODM3MV9WNA" alt="img"></p><p>再重新进行抓包即可解析出TLS文件。</p><p>对话窗不能是通过恢复协议而恢复的窗口， 报文中一定要包含有 <code>ClientKeyExchange</code>的握手消息</p><p><strong>如果是使用RSA密钥交换算法，那么报文中一定要包含ClientKeyExchange的消息， 这样wireshark 才能拿到客户端产生的随机数(预主密钥)，才能把密钥和报文匹配起来， 而恢复会话就很难确定之前的密钥是什么值了。</strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/07/hello-world%20-%20%E5%89%AF%E6%9C%AC/"/>
    <url>/2024/03/07/hello-world%20-%20%E5%89%AF%E6%9C%AC/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/07/hello-world/"/>
    <url>/2024/03/07/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p>这是一篇测试文章</p><img src="/2021/06/10/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" class="" title="图片引用方法一"><p><img src="/test.png" alt="图片引用方法二"></p><p><img src="/images/test.png" alt="图片引用方法三"></p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
